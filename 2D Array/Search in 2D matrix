Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.

Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
Output: true

#BRUTE FORCE
iterate through the matrix and then find target
T.C-O(N*M)
S.C-O(1)


#OPTIMAL FORCE
USING BINARY SEARCH 
as the matrix is sorted we can consider it as an sorted array 
and then apply imaginary binary search


T.C- O(N+M)
S.C-O(1)

JAVA CODE-
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int c= matrix[0].length;
        int r= matrix.length;
        int low=0,mid=0;
        int high=r*c-1;
        
        //using binary search within the matrix
     while(low<=high)
     {
         mid=low+(high-low)/2;
         if(matrix[mid/c][mid%c]==target)
             return true;
         if(matrix[mid/c][mid%c]<target)
             low=mid+1;
          if(matrix[mid/c][mid%c]>target)
             high=mid-1;
       
     }
        return false;
    }
}
