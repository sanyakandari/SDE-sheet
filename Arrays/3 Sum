Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

 Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]


BETTER FORCE
#using hashmap and hashset
T.C-O(N2 *LOGM)
S.C-O(N)+O(M)

OPTIMAL FORCE
#USING TWO POINTER

a+b+c=0;
b+C=-a
1. sort the array

T.C-O(N*N)
S.C-O(1)

JAVA CODE-
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        Arrays.sort(nums);
         List<List<Integer>> res = new ArrayList<>();
   
          //A+B+C=0
        //B+C=-A
        //LOOP FOR A
        for(int i=0;i<nums.length-2;i++)
        {
            //to avoid duplicates
            if(i==0 || (i>0 &&nums[i]!= nums[i-1])){
                int lo=i+1,hi=nums.length-1;
                int sum=0-nums[i]; //-A
                
            ///to find b and c
                while(lo<hi)
                {
                   if(nums[lo]+nums[hi]==sum)//b+c=-a
                   {
                       res.add(Arrays.asList(nums[i],nums[lo],nums[hi]));
                       //ignore all the duplicates
                       while(lo<hi &&nums[lo]==nums[lo+1])
                           lo++;
                       
                        while(lo<hi &&nums[hi]==nums[hi-1])
                           hi--;
                       
                       lo++;
                       hi--;
                   }
                       
                     else if(nums[lo]+nums[hi]<sum)
                         lo++;
                    else
                        hi--;
                       
                }  
               }
            }
            return res;
        }
}
