Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:

0 <= a, b, c, d < n
a, b, c, and d are distinct.
nums[a] + nums[b] + nums[c] + nums[d] == target
You may return the answer in any order.

 Input: nums = [1,0,-1,0,-2,2], target = 0
Output: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]

#BRUTE FORCE
 ALGO-
 1. sort the array
 2.use 3 sum approach , 3 pointer 
 4. store the sum in hashset and for quad use hashset
 
 T.C -O(N^3LOGN) +O(LOGN)
 S.C -O(1)
 
 #OPTIMAL FORCE
 ALGO-
 1. SORt the array
 2. use 2 pointer approach , remaining = target- i-j
 3. use another 2 pointer to find remaining target using binary search
4. if target found , add to res and move all pointer ahead
5. make sure to skip the duplicates

T.C -O(N^3)
S.C-O(1)

JAVA CODE-
class Solution {
    public List<List<Integer>> fourSum(int[] num, int target) {
        //RES
        List<List<Integer>> res= new ArrayList<>();
        //edge case
        if(num==null || num.length==0)
             return res;
        int n= num.length;
        //sort the array
        Arrays.sort(num);
        for(int i=0;i<n;i++)
        {
            for(int j=i+1;j<n;j++)
            {
                //remaining sum
                int target2= target -num[i]-num[j];
                //two pointer to find target2
                int left = j+1;
                int right= n-1;
                
                //binary search
                while(left<right)
                {
                    int twosum= num[left]+num[right];
                    if(twosum<target2)
                        left++;
                    else if(twosum>target2)
                        right--;
                    
                    else{
                        //found, add to res
                        List<Integer> quad= new ArrayList<>();
                        quad.add(num[i]);
                        quad.add(num[j]);
                        quad.add(num[left]);
                        quad.add(num[right]);
                        res.add(quad);
                        
                        //move the pointer ahead, and skip duplicates
                        while(left<right && num[left]==quad.get(2))
                            ++left;
                        
                          while(left<right && num[right]==quad.get(3))
                            --right;   
                       }
                   }
                
                //move the j pointer ahead , skip duplicates
                while(j+1<n &&num[j+1]==num[j])
                     ++j;
            }
            //move i pointer ahead
            while(i+1<n &&num[i+1]==num[i])
                     ++i;
        }
        return res;
    }
}
