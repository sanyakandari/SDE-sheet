Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.

There is only one repeated number in nums, return this repeated number.
You must solve the problem without modifying the array nums and uses only constant extra space.

Input: nums = [1,3,4,2,2]
Output: 2

#BRUTE FORCE
USING MERGE SORTING
1.Sort the array
2.Traverse and check if (a[i]==a[i+1]) then a[i] is duplicate.

T.C = O(NlogN) MERGE SORT
S.C=O(1)

#BETTER FORCE
USING HASHING METHOD

1.make a freq array having the freq of no. at index=num.
2.traverse through the new array
3.if(a[i]>1) -> i is duplicate num.

T.C=O(N)
S.C=O(N)

JAVA CODE:-

   public int findDuplicate(int[] nums) {
       int a[]= new int[n];
        for(int i:arr)
         a[i]++;
         for(int i=0;i<n;i++)
         {
             if(a[i]>1)
               return i;
            
         }
        return -1;
        }
        
 
#OPTIMAL FORCE
USING LINKEDLIST CYCLE METHOD + TORTOISE METHOD 

1. using two pointers - slow and fast
2. tortoise method, slow= 1 step and fast=2step
3.at one point the pointers collide, then put fast at 0 index and slow as it is
//second cylic loop
4.now move both pointers slow and fast=1 step
5. the point where they collide will always be the duplicate num.

JAVA CODE:-
class Solution {
    public int findDuplicate(int[] nums) {
      
       int slow=nums[0];//pointer 
        int fast = nums[0];
        //cyclic loop using tortoise method
        do{
            slow=nums[slow];//1 step forward
            fast = nums[nums[fast]]; //2 step forward
        }while(slow !=fast);
        //after first collision
        fast=nums[0];
        
        while(slow!=fast)
        { //second cyclic loop to find duplicate no.
            slow= nums[slow];
         fast = nums[fast];//both pointer 1 step ahead
            
        }
        return slow;
    }
}


















