Given an integer numRows, return the first numRows of Pascal's triangle.
Input: numRows = 5
Output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]

TYPE1: PRINT WHOLE TRIANGLE 
        T.C=O(N^2) 
        S.C=O(N^2)

1. first and last column always=1;
2.n col=nrows
3. value at Row and col r-1cc-1

JAVA CODE:
class Solution {
    public List<List<Integer>> generate(int numRows) {
        List<List<Integer>> res= new ArrayList<List<Integer>>();
        List<Integer> row,pre=null;
        for(int i=0;i<numRows;i++)
        {
            //initialising the row array
            row= new ArrayList<Integer>();
            for(int j=0;j<=i;j++)
            {
                //putting pascal val into row elements
                if(j==0 ||j==i)//first or last column
                  row.add(1);
                else
                    row.add(pre.get(j-1)+pre.get(j));//adding the prev two elements
            }
                pre=  row;//to store prev value at index
                res.add(row);
        }
        return res;
    }
}

TYPE 2: 
Given an integer rowIndex, return the rowIndexth (0-indexed) row of the Pascal's triangle.
Input: rowIndex = 3
Output: [1,3,3,1]

Based on rules: 
row k of Pascal's Triangle:

[C(k,0), C(k,1), ..., C(k, k-1), C(k, k)]
and
C[k,i] = C[k,i-1]*(k-i+1)/i

T.C=O(n)

JAVA CODE:=
 public class Solution {
        public List<Integer> getRow(int rowIndex) {
            Integer[] rowList = new Integer[rowIndex+1];
            rowList[0] = 1;
            for(int i=1; i<rowList.length;i++) {
                rowList[i] = (int)((long)rowList[i-1]*(rowIndex-(i-1))/(i));
            }
            return Arrays.asList(rowList);
        }
    }
    
    
    
