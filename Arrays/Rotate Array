Given an array, rotate the array to the right by k steps, where k is non-negative.
Input: nums = [1,2,3,4,5,6,7], k = 3
Output: [5,6,7,1,2,3,4]
Explanation:
rotate 1 steps to the right: [7,1,2,3,4,5,6]
rotate 2 steps to the right: [6,7,1,2,3,4,5]
rotate 3 steps to the right: [5,6,7,1,2,3,4]


Using 2 pointers

Algo:=
1.nums = [1,2,3,4,5,6,7] and k = 3, first we reverse [1,2,3,4], it becomes[4,3,2,1]; 
2.then we reverse[5,6,7], it becomes[7,6,5],
3.reverse the array as a whole, it becomes[4,3,2,1,7,6,5] ---> [5,6,7,1,2,3,4].


JAVA CODE=
class Solution {
    public void rotate(int[] nums, int k) {

    if(nums == null || nums.length < 2){
        return;
    }
    
    k = k % nums.length; 
    reverse(nums, 0, nums.length - k - 1); //first half reverse
    reverse(nums, nums.length - k, nums.length - 1); //second half reverse
    reverse(nums, 0, nums.length - 1); //whole array reverse
    
}

private void reverse(int[] nums, int i, int j){
    int tmp = 0;       
    while(i < j){  //reversing the last element with first
        tmp = nums[i];
        nums[i] = nums[j];
        nums[j] = tmp;
        i++;
        j--;
    }
}
}
