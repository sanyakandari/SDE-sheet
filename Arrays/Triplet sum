Given an array arr of size n and an integer X. Find if there's a triplet in the array which sums up to the given integer X.
Input:
n = 6, X = 13
arr[] = [1 4 45 6 10 8]
Output:
1
Explanation:
The triplet {1, 4, 8} in 
the array sums up to 13.

#USING BINARY SEARCH AND LOOP
T.C-O(N^2)
S.C-O(1)

class Solution
{
    //Function to find if there exists a triplet in the 
    //array A[] which sums up to X.
    public static boolean find3Numbers(int A[], int n, int X) { 
    
           Arrays.sort(A);
           for(int i=0;i<n;i++)
           {
               int lo=i+1,hi=n-1;
               int sum=X-A[i];
               
               while(lo<hi)
               {
                   if(A[lo]+A[hi]==sum)
                     return true;
                    
                    else if(A[lo]+A[hi]<sum)
                         lo++;
                    else
                        hi--;
            
               }
             
           }
          return false;
    }
}
