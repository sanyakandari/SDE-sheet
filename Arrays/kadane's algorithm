Find Max subarray sum-
Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.
Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.

                                               KADANE ALGORITHM 
                                               BRUTE FORCE
                  Using 3 iterative loops to find the sum of all subarrays
                  T.C - O(N^3)
Java code-

class solution{
   pubic int maxsubarray(int [] arr,int n)
   {
      int sum=0,max=0;
      for(int i=0;i<n;i++){
      
      
      for(int j=0;j<n;j++)
       {
         for(int k=i;k<=j;k++)
           sum =sum=arr[k];
           
          max= Math.max(sum,max);
          
          }
          }
          return max;
    }
 }
   
                                                            BETTER FORCE
                                                        Remove the third inner loop and T.C - O(N^2)
                  JAVA CODE-
 class solution{
   pubic int maxsubarray(int [] arr,int n)
   {
      int sum=0,max=0;
      for(int i=0;i<n;i++){
       sum=0;
      
      for(int j=0;j<n;j++)
          sum =sum=arr[j];
           
          max= Math.max(sum,max);
          
       }
          
          return max;
    }
 }
   
                                                     OPTIMAL FORCE (KADANE'S ALGORITHM)
                                     SINGLE LOOP ITERATION   T.C- O(N)   S.C -O(1)
 1. Take sum=0 and max=arr[0];
 2. start traversingthrough the loop taking sum=sum+arr[i];
 3. Cond 1= if(sum>max) max=sum;
 4. cond 2= if(sum<0) sum=0;
 
 JAVA CODE =
 int maxSubarraySum(int arr[], int n){
        
    int sum=0;
    int max=arr[0];
    for(int i=0;i<n;i++)
    {
        sum=sum+arr[i];
        if(sum>max) //CONDITION 1
            max=sum;
            
        if(sum<0)  //CONDITION 2
           sum=0;
     }     
    return max; 
        
    }
                           
                  
