Given two sorted arrays arr1[] and arr2[] of sizes n and m in non-decreasing order. 
Merge them in sorted order without using any extra space. Modify arr1 so that it contains the first N elements and modify arr2 so that it contains the last M elements.
 
Input: 
n = 4, arr1[] = [1 3 5 7] 
m = 5, arr2[] = [0 2 6 8 9]
Output: 
arr1[] = [0 1 2 3]
arr2[] = [5 6 7 8 9]
Explanation:
After merging the two 
non-decreasing arrays, we get, 
0 1 2 3 5 6 7 8 9.


#BRUTE FORCE
1. use another array with size[n1+n2]
2.add all the elements into the new array and sort it
3.place the elements back to its initial arrays

T.C= O(NLOGN)+O(N)+O(N)
S.C=O(N)

here we are using extra space

#BETTER FORCE
INSERTION SORT ALGO

1. linearly traverse in the first array
2. check if a1[i]>a2[0], then swap both values
3.sort the a2 second array.

T.C= O(N*M)
S.C=O(1)

JAVA CODE:-
public static void merge(int [] x,int[]y)
{
   int m=x.length;
   int n=y.length;
   for(int i=0;i<m;i++)
   {
       //compare
       if(x[i]>y[0])
       {
         //swap the both values
         int temp=x[i];
         x[i]=y[0];
         y[0]=temp;
         
         //sort y
         int first=y[0];
         for(int k=1;k<n&&y[k]<first;k++)
            y[k-1]=y[k];
            
           y[k-1]=first;

    }
  }
 }
 
 
#OPTIMAL FORCE
USING GAP METHOD

1.gap= n+m/2  (always the ceil value and loop will run until gap==1)
2.two pointers = first=a[o] and second =a[first+gap];
3.check a[first]>a[second] ->swap the values
4. if second out of array, new gap will be calculated
5. again, step2 repeat.
6.if gap==1, end

T.C= O(LOG2N)+O(N) =O(NLOGN)
S.C=O(1)


JAVA CODE:-
