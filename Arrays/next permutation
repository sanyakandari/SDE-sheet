Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.
If such an arrangement is not possible, it must rearrange it as the lowest possible order (i.e., sorted in ascending order).
The replacement must be in place and use only constant extra memory.

Input: nums = [1,2,3]
Output: [1,3,2]

BRUTE FORCE:
1. generate all the possible combo
2.take the input and then find linearly in the combos
3.output the next combo

T.C=O(N^2)

#OPTIMAL FORCE
T.C=O(N)+O(N)+O(N)
      =O(N)
S.C=O(1)

ALGO:  based on the dictionary order
1.linearly traverse from back
2.find the index such that, a[i]<a[i+1]
3.again traverse from back, find the index where,a[index2]>a[index1]
4.swap the values at index1 and index2
5.reverse the array from the next index of index1 to last index

JAVA CODE:=
class Solution {
    public void nextPermutation(int[] nums) {
        
        int n=nums.length;
        
        //edge case
        if(nums==null || n<=1)return;
        
        int i=n-2;//second last index
        
        //STEP 1:FIND THE INDEX ,BREAK POINTS
        while(i>=0 &&nums[i]>=nums[i+1])
            i--;
        
        //if we get break points iterate backwards :STEP 2
        if(i>=0)
        {
           int j=n-1;
            while(nums[j]<=nums[i])
                j--;
            
            
            //STEP3 SWAP
            swap(nums,i,j);
        }
        //STEP 4 REVERSE from next of i to last index
        reverse(nums,i+1,n-1);
    }
    public void swap(int []a,int i,int j)
    { 
        int t=a[i];
        a[i]=a[j];
        a[j]=t;
     }
    public void reverse(int []a,int i,int j)
    {
        while(i<j)
        {    swap(a,i,j);
          i++;
          j--;
        }
        
    }
}
