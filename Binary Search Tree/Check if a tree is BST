Given the root of a binary tree, determine if it is a valid binary search tree (BST).

A valid BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
Input: root = [2,1,3]
Output: true

#USING THE RANGE LOGIC
IF THE ELEMENT LIES IN THE RANGE (MINVAL,MAXVAL)-->VALID BST

T.C-O(N)
S.C-O(1)

ALGO-
1. when we are on the left side, range-(minval, root.val)
2. when we are on the right side, range -(root.val,maxval)

JAVA CODE-
class Solution {
    public boolean isValidBST(TreeNode root) {
        return checkBST(root, Long.MIN_VALUE,Long.MAX_VALUE);
    }
    public boolean checkBST(TreeNode root, long minval , long maxval)
    {
        if(root==null)
            return true; //check complete no fault
        //edge case
        if(root.val>=maxval || root.val<=minval) //element exceed range
            return false;
        
        //condition to check for range
        return checkBST(root.left,minval,root.val) && checkBST(root.right,root.val,maxval);
    }
}
