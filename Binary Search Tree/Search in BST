You are given the root of a binary search tree (BST) and an integer val.

Find the node in the BST that the node's value equals val and return the subtree rooted with that node. If such a node does not exist, return null.

 Input: root = [4,2,7,1,3], val = 2
Output: [2,1,3]

#USING BINARY SEARCH APPROACH
T.C-O(LOGN)
S.C-O(1)

JAVA CODE-
class Solution {
    public TreeNode searchBST(TreeNode root, int val) {
        while(root!=null &&root.val!=val)
        {
            root=val<root.val?root.left:root.right; //if smaller then go left, otherwise go right
        }
        return root;
    }
}
