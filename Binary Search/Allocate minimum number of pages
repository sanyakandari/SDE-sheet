You are given N number of books. Every ith book has Ai number of pages. 
You have to allocate contagious books to M number of students. There can be many ways or permutations to do so. In each permutation, one of the M students will be allocated the maximum number of pages. Out of all these permutations, the task is to find that particular permutation in which the maximum number of pages allocated to a student is minimum of those in all the other permutations and print this minimum value. 

Each book will be allocated to exactly one student. Each student has to be allocated at least one book.

Input:
N = 4
A[] = {12,34,67,90}
M = 2
Output:
113

#USING BINARY SEARCH 
T.C -O(N)
S.C -O(1)

ALGO-
1. start the binary search , start = max element ... max pages one student will read atleast
2. end of the binary search , end = sum of all element , if one student is to read all books , sum of all pages
3. check if the mid(max pages per person) cause valid distribution , if it does --> find smaller res  high=mid-1
4. if it doesnot, move towards right, low=mid+1
5. return res]

JAVA CODE-
class Solution 
{
    //Function to find minimum number of pages.
    public static int findPages(int[]A,int N,int M)
    {   Arrays.sort(A);
        //BInary search
        int start= maxelement(A,N);
        int end = sumofall(A,N);
        int res =-1; //min no of pages
        //edge case
        if(N<M)
           return -1;
        if(M==1)
            return end;
        while(start<end)
          {
              //binary search
              int mid= start+(end-start) /2;
              if(isValid(A,N,M,mid)) //if it is possible
                {
                   res= mid;
                   end= mid-1;
                }
                else 
                  start=mid+1;
          }
          return res;
    }
    //is valid function to find whether we can divide mid in M students
    public static boolean isValid(int[] arr,int n, int k, int max)
       {
           //to count the no of students required
           int student=1;
           int sum=0; //for first student
           for(int i=0;i<n;i++)
             {
                 sum=sum+arr[i];
                 if(sum>max)  //require another student
                   {
                       //update no of students
                       student++;
                       sum=arr[i];
                   }
                   //if we require more students than given 
                   //we can't allocate the mid no of pages 
                   if(student>k)
                     return false;
             }
             
             return true;
       }
       public static int maxelement(int[] arr, int n)
         {
             int max=arr[0];
             for(int i=1;i<n;i++)
                 {if(max<arr[i])
                    max=arr[i];
                 }
                 return max;
         }
         public static int sumofall(int [] arr, int n)
          {
              int sum=0;
              for(int i=0;i<n;i++)
                  sum=sum+arr[i];
                return sum;
          }
};
