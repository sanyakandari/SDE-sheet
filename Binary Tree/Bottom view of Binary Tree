Given a binary tree, print the bottom view from left to right.
A node is included in bottom view if it can be seen when we look at the tree from bottom.

                      20
                    /    \
                  8       22
                /   \        \
              5      3       25
                    /   \      
                  10    14

For the above tree, the bottom view is 5 10 3 14 25.
Input:
       1
     /   \
    3     2
Output: 3 1 2
Explanation:
First case represents a tree with 3 nodes
and 2 edges where root is 1, left child of
1 is 3 and right child of 1 is 2.

#USING BFS AND TREEMAP
ALGO- same as top view only change is that we'll keep on updating the map value

T.C-O(N)
S.C-O(N)

JAVA CODE-
class Pair{
    int ver;
    Node node;
  Pair(Node node,int ver)
     {
         this.node=node;
         this.ver=ver;
     }
}
class Solution
{
      public ArrayList <Integer> bottomView(Node root)
    {  ArrayList<Integer> res = new ArrayList<>();
    
        //edge case
        if(root==null)
          return res;
        
        //hashmap to store the vertical no and its first node
        Map<Integer,Integer> map = new TreeMap<>();
        //queue to store the pair of node and its vertical
        Queue<Pair> q = new LinkedList<Pair>();
        //first root will have 0th vertical no
        q.add(new Pair(root,0));
        
        //BFS
        while(!q.isEmpty())
        {
            Pair it= q.poll();
            Node temp= it.node;
            int ver= it.ver;
            

               map.put(ver,temp.data);
               
             //adding child nodes to queue
            if(temp.left!=null)
             q.add(new Pair(temp.left,ver-1));
            
            if(temp.right!=null)
             q.add(new Pair(temp.right,ver+1));
            
        }
         
         
         //store res from hashmap
         for(Map.Entry<Integer,Integer> e: map.entrySet())
            res.add(e.getValue());
            
    return res;
        
        
    }
}

