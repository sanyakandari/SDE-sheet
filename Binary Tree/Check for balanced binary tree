Given a binary tree, determine if it is height-balanced.

For this problem, a height-balanced binary tree is defined as:

a binary tree in which the left and right subtrees of every node differ in height by no more than 1.

 Input: root = [3,9,20,null,null,15,7]
Output: true

#USING DFS AND FIND HEIGHT
T.C- O(N)

ALGO-
1. find the height at each node
2. check for balanced condition i.e - lh-rh<=1
3. if the condition fails --- return -1
4. if any node has val =-1 , then return false directly
5. height will be the max of( right, left )+1

JAVA CODE-
class Solution {
    public boolean isBalanced(TreeNode root) {
     
        if(root==null)
            return true;
         return dfsheight(root)!=-1;
    }
    public static int dfsheight(TreeNode root)
    {
        if(root==null)
            return 0;
        //check for left height
        int leftheight= dfsheight(root.left);
        if(leftheight==-1)
              return -1;
        //check for right height
        int rightheight= dfsheight(root.right);
           if(rightheight==-1)
              return -1;
        
        //check for balanced condition
        if(Math.abs(leftheight-rightheight)>1)
            return -1;
        
        //calculating height
        return Math.max(leftheight,rightheight)+1;
        
        
        
    }
}
