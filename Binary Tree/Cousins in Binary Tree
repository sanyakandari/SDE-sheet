Given the root of a binary tree with unique values and the values of two different nodes of the tree x and y, return true if the nodes corresponding to the values x and y in the tree are cousins, or false otherwise.

Two nodes of a binary tree are cousins if they have the same depth with different parents.

Note that in a binary tree, the root node is at the depth 0, and children of each depth k node are at the depth k + 1.
Input: root = [1,2,3,4], x = 4, y = 3
Output: false

#USING LEVEL ORDER TRAVERSAL
ALGO-
1. if BOTH X AND Y HAVE SAME PARENT -->false
2. Both x and y have same level and diff parent --> TRUE


JAVA CODE-
class Solution {
    public boolean isCousins(TreeNode root, int A, int B) {
        //level order traversal
        //same level contains then true
        if(root==null)
            return false;
        Queue<TreeNode> q= new LinkedList<>();
        q.add(root);
        
        //BFS
        while(!q.isEmpty()){
       int size = q.size();
		boolean isAexist = false;		
		boolean isBexist = false;		
		for (int i = 0; i < size; i++) {
			TreeNode cur = q.poll();
        //DIFF PARENT
            if (cur.val == A) isAexist = true; 
            if (cur.val == B) isBexist = true;
            
            //SAME PARENT
			if (cur.left != null && cur.right != null) { 
				if (cur.left.val == A && cur.right.val == B) { 
					return false;
				}
				if (cur.left.val == B && cur.right.val == A) { 
					return false;
				}
			}
      
      //ADD CHILD NODES TO QUEUE
			if (cur.left != null) {
				q.offer(cur.left);
			}
			if (cur.right != null) {
				q.offer(cur.right);
			}
		}
		if (isAexist && isBexist)  return true;
	}
	return false;
  }
}
