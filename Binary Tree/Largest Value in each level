Given a binary tree, find the largest value in each level.

Example 1:

Input :
        1
       / \
      2   3 

Output : 1 3
Explanation : 
There are two levels in the tree :
1. {1}, max = 1
2. {2, 3}, max = 3

T.C - O(N)
S.C - O(N)

#USING BFS

JAVA CODE-
class Solution
{
    public ArrayList<Integer> largestValues(Node root)
    {
        //code here
        ArrayList<Integer> bfs= new ArrayList<>();
        if(root==null)
          return bfs;
         Queue<Node> q= new LinkedList<>();
         q.add(root);
         
        
         while(!q.isEmpty())
         {
           int max= q.peek().data;
           int size=q.size();
           for(int i=0;i<size;i++)
           {
               Node curr= q.poll();
               if(max<curr.data)
                 max=curr.data;
                 
                 //add  nodes
                 if(curr.left!=null)
                   q.add(curr.left);
                  if(curr.right!=null)
                    q.add(curr.right);
        
           }
           bfs.add(max);
         }
         return bfs;
    }
}
