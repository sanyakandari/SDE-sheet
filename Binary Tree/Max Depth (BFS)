Given the root of a binary tree, return its maximum depth.

A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.

 Input: root = [3,9,20,null,null,15,7]
Output: 3

#APPROACH 1
USING RECURSIVE CALL
1. Counting the max child nodes of the Binary Treee from root

T.C- O(n)
S.C-O(n)

Java Code-
class Solution {
    int max=0;
    public int maxDepth(TreeNode root) {
        if(root==null)
            return 0;
      
        
        max=1+Math.max(maxDepth(root.left),maxDepth(root.right));
        return max;
        
    }
}


#APPROACH 2 
USING BFS AND COUNTING THE LEVEL NO OF THE LAST LEAF
1. i.e at the end of BFS traversal we will get the last leaf, hence the level no.

JAVA CODE-
 
class Solution {
    int max=0;
    public int maxDepth(TreeNode root) {
      if(root == null) {
        return 0;
    }
    Queue<TreeNode> queue = new LinkedList<>();
    queue.offer(root);
    int count = 0;
    while(!queue.isEmpty()) {
        int levelsize = queue.size();
        while(levelsize-- > 0) {
            TreeNode current = queue.poll();
            if(current.left != null) {
                queue.offer(current.left);
            }
            if(current.right != null) {
                queue.offer(current.right);
            }
        }
        count++;
    }
    return count;
}
}
