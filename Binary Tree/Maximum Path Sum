A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them.
A node can only appear in the sequence at most once. Note that the path does not need to pass through the root.

The path sum of a path is the sum of the node's values in the path.
Input: root = [1,2,3]
Output: 6
Explanation: The optimal path is 2 -> 1 -> 3 with a path sum of 2 + 1 + 3 = 6.



ALGO-
1. similar to what we have done in diameter path 
2. change the sum for left/right side to 0 .
3.basically we are neglecting the negative sum.

JAVA CODE-
class Solution {
    public static int maxsum;
    public int maxPathSum(TreeNode root) {
        maxsum=Integer.MIN_VALUE;
        findmaxsum(root);
            return maxsum;
    }
    
    
    public static int findmaxsum(TreeNode root)
    {
        if(root==null)
            return 0;
        int leftsum= findmaxsum(root.left);
        int rightsum = findmaxsum(root.right);
        
        //update the sum to 0 is its negative
        leftsum=Math.max(leftsum,0);
        rightsum=Math.max(rightsum,0);
        //calculating current sum for the node
        int currsum = leftsum+rightsum+root.val;
        
        maxsum=Math.max(currsum,maxsum);
         return Math.max(leftsum,rightsum)+root.val;
        
        
        
    }
}
