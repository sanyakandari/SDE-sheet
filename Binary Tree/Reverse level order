Given the root of a binary tree, return the bottom-up level order traversal of its nodes' values. (i.e., from left to right, level by level from leaf to root).
Input: root = [3,9,20,null,null,15,7]
Output: [[15,7],[9,20],[3]]


#using BFS 
JUST ADD THE LIST OF EACH LEVEL IN THE "FRONT" INSTEAD OF THE END.

JAVA CODE-
class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        List<List<Integer>> bfs= new ArrayList<>();
        if(root==null)
            return bfs;
         Queue<TreeNode> queue= new LinkedList<>();
        queue.add(root);
        while(!queue.isEmpty())
        {
            List<Integer> currlevel = new ArrayList<>();
            int levelsize= queue.size();
            for(int i=0;i<levelsize;i++)
            {
                TreeNode current = queue.poll();
                currlevel.add(current.val);
                
                if(current.left!=null)
                    queue.add(current.left);
                 
                if(current.right!=null)
                    queue.add(current.right);
           
            }
            bfs.add(0,currlevel); //adding the level at the front    
        }
        return bfs;
    }
}
