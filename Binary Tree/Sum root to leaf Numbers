You are given the root of a binary tree containing digits from 0 to 9 only.

Each root-to-leaf path in the tree represents a number.

For example, the root-to-leaf path 1 -> 2 -> 3 represents the number 123.
Return the total sum of all root-to-leaf numbers. Test cases are generated so that the answer will fit in a 32-bit integer.

A leaf node is a node with no children.

Input: root = [1,2,3]
Output: 25
Explanation:
The root-to-leaf path 1->2 represents the number 12.
The root-to-leaf path 1->3 represents the number 13.
Therefore, sum = 12 + 13 = 25.

#USING DFS 
T.C-O(N)
S.C-O(1)

1.using pathsum to track the num of each side 
2.pathsum= pathsum*10 +root.val
3.it gets updated after every node and once the node becomes null. 
4. i.e the num is generated , for the next num it becomes 0 again

JAVA CODE-
class Solution {
    public int sumNumbers(TreeNode root) {
        return findPath(root,0);
    }
    public static int findPath(TreeNode root, int pathsum)
    {
        if(root==null)
            return 0; //pathsum will update for right node
        
        //calculate the pathsum
        pathsum=pathsum*10+ root.val;
        //check if node is leaf then return the pathsum
        if(root.left==null &&root.right==null)
            return pathsum;
        
        //recursive call for both the left and right side
        return findPath(root.left,pathsum)+findPath(root.right,pathsum);
    
        
    }
}
