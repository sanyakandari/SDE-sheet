Given below is a binary tree. The task is to print the top view of binary tree. Top view of a binary tree is the set of nodes visible when the tree is viewed from the top. For the given below tree

       1
    /     \
   2       3
  /  \    /   \
4    5  6   7

Top view will be: 4 2 1 3 7
Note: Return nodes from leftmost node to rightmost node.

#USING BFS AND TREEMAP --- to have val in sorted order (-2,-1,0,1,2)

T.C -O(N)
S.C-O(N)

ALGO-
1. use a hashmap to maintain the first occurence of each level and its vertical.
2. Map<Integer,Integer> where key is the vertical no. (unique), value is the node.data
3. Queue will store the node val in pair of the node and its vertical no.
4. perform Bfs
5. store the val from hashmap to the arraylist

JAVA CODE-
class Pair{
    int ver;
    Node node;
  Pair(Node node,int ver)
     {
         this.node=node;
         this.ver=ver;
     }
}
class Solution
{
    

    //Function to return a list of nodes visible from the top view 
    //from left to right in Binary Tree.
    static ArrayList<Integer> topView(Node root)
    {  ArrayList<Integer> res = new ArrayList<>();
    
        //edge case
        if(root==null)
          return res;
        
        //hashmap to store the vertical no and its first node
        Map<Integer,Integer> map = new TreeMap<>();
        //queue to store the pair of node and its vertical
        Queue<Pair> q = new LinkedList<Pair>();
        //first root will have 0th vertical no
        q.add(new Pair(root,0));
        
        //BFS
        while(!q.isEmpty())
        {
            Pair it= q.poll();
            Node temp= it.node;
            int ver= it.ver;
            
            //check if it exsist in the map or not
            if(map.get(ver)==null)
               map.put(ver,temp.data);
               
             //adding child nodes to queue
            if(temp.left!=null)
             q.add(new Pair(temp.left,ver-1));
            
            if(temp.right!=null)
             q.add(new Pair(temp.right,ver+1));
            
        }
         
         
         //store res from hashmap
         for(Map.Entry<Integer,Integer> e: map.entrySet())
            res.add(e.getValue());
            
    return res;
        
        
    }
}
