You are given weights and values of N items, put these items in a knapsack of capacity W to get the maximum total value in the knapsack. 
Note that we have only one quantity of each item.

Input:
N = 3
W = 4
values[] = {1,2,3}
weight[] = {4,5,1}
Output: 3

T.C- O(N*2)
#USING RECURSION

JAVA CODE-
class solution{
static int knapSack(int W, int wt[], int val[], int n) 
    { 
         // base condition
         if(n==0 || W==0)
            return 0;
        //choice diagram
        if(wt[n-1]<=W)
          return Math.max((val[n-1]+knapSack(W-wt[n-1],wt,val,n-1)), knapSack(W,wt,val,n-1));
          
          else if(wt[n-1]>W)
             return knapSack(W,wt,val,n-1);
             
      return 0;
    } 
    
#USING RECURSION+MEMOISE
T.C-O(N*W)
S.C -O(N*W)

JAVA CODE-
class solution{
int static t[][]=new int[n][w];
//inittialise the val of matrix to -1;
static int knapSack(int W, int wt[], int val[], int n) 
    { 
         // base condition
         if(n==0 || W==0)
            return 0;
         //check if present in matrix
         if(t[n][w]!=-1)
           return t[n][w];
         
        //choice diagram
        if(wt[n-1]<=W)
          return t[n][w]=Math.max((val[n-1]+knapSack(W-wt[n-1],wt,val,n-1)), knapSack(W,wt,val,n-1));
          
          else if(wt[n-1]>W)
             return t[n][w]=knapSack(W,wt,val,n-1);
             
      return 0;
    } 

