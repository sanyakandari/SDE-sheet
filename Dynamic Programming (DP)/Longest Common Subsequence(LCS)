Given two strings text1 and text2, return the length of their longest common subsequence. If there is no common subsequence, return 0.

A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.

For example, "ace" is a subsequence of "abcde".
A common subsequence of two strings is a subsequence that is common to both strings.
Input: text1 = "abcde", text2 = "ace" 
Output: 3  
Explanation: The longest common subsequence is "ace" and its length is 3.

#USING RECURSION +MEMOISATION
T.C- O(N*M)
S.C -O(N*M)

JAVA CODE -
class Solution {
    
    int[][] t = new int[1001][1001];  
   
    
    
    public int longestCommonSubsequence(String text1, String text2) {
        int n=text1.length();
        int m=text2.length();
        char[] x= text1.toCharArray();
        char []y=text2.toCharArray();
        for(int[] arr1 : t) 
  Arrays.fill(arr1, -1);
        
        int res= lcs(x,y,n,m);
        return res;
    }
    int lcs(char[] x,char[]y,int n,int m)
    {
        if(n==0 || m==0)
            return 0;
        if(t[n][m]!=-1)
            return t[n][m];
        if(x[n-1]==y[m-1])
             return t[n][m]= 1+lcs(x,y,n-1,m-1);
        else
             return t[n][m]=Math.max(lcs(x,y,n,m-1),lcs(x,y,n-1,m));
       
    }
}

#USING TOP DOWN APPROACH
1. BASE condition--t[i][j] , when i==0 || j==0
2. choice duagram fill rest matrix
3. ans--> t[m][n] ,last element of matrix


JAVA CODE- 
class Solution
{
   
    //Function to find the length of longest common subsequence in two strings.
    static int lcs(int x, int y, String s1, String s2)
    { //top down approach
          int m=x;
          int n=y;
     int t[][]=new int[m+1][n+1];
     
     //base condition
     for(int i=0;i<=m;i++)
       {for(int j=0;j<=n;j++)
         {
             if(i==0 || j==0)
               t[i][j]=0;
         }
       }
      
      //choice diagram
      for(int i=1;i<m+1;i++)
       { 
           for(int j=1;j<n+1;j++)
           { if(s1.charAt(i)==s2.charAt(j))
                t[i][j]=1+t[i-1][j-1];
             else
                t[i][j]=Math.max(t[i-1][j],t[i][j-1]);
           }
       }
       return t[m][n];
    }
}
    

