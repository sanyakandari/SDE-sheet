Given a sequence of matrices, find the most efficient way to multiply these matrices together. The efficient way is the one that involves the least number of multiplications.

The dimensions of the matrices are given in an array arr[] of size N (such that N = number of matrices + 1) where the ith matrix has the dimensions (arr[i-1] x arr[i]).
Input: N = 5
arr = {40, 20, 30, 10, 30}
Output: 26000
Explaination: There are 4 matrices of dimension 
40x20, 20x30, 30x10, 10x30. Say the matrices are 
named as A, B, C, D. Out of all possible combinations,
the most efficient way is (A*(B*C))*D. 
The number of operations are -
20*30*10 + 40*20*10 + 40*10*30 = 26000.

 ALGO-
 1. use variable k to break the arr/string into parts
 2. i=1 and j-n-1
 3. k--> i to j-1
 4.base cond and format, int tmp= solve(arr,i,k) //first part +solve(arr,k+1,j)//second part
 5. min cost ==min(temp)
 
 T.C-O(N)
 S.C-O(N)
 
 JAVA CODE-
 #RECURSION +MEMOISE
 
 class Solution{
   static int [][]t= new int[101][101];
    static int matrixMultiplication(int N, int arr[])
    { //initialise t to -1
       for(int i=0;i<N;i++)
         for(int j=0;j<N;j++)
             t[i][j]=-1;
    
        int i=1,j=N-1;
        int res=solve(arr,i,j);
        
        return res;
    }
   static int solve(int []nums,int i,int j)
    {
        //base condition
        if(i>=j)
            return 0;
        //memoise
        if(t[i][j]!=-1)
            return t[i][j];
        
        //min variable
        int min= Integer.MAX_VALUE;
        //for mcm format
        //k->i to j-1;
        for(int k=i;k<=j-1;k++)
        {
         int temp= solve(nums,i,k)+solve(nums,k+1,j)+(nums[i-1]*nums[k]*nums[j]);
            if(temp<min)
                min=temp;
        } 
        //assign to matrix
        return t[i][j]=min;
    }
}
