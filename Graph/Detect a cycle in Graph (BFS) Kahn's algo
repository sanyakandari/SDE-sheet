ALGO -
 Kahn' algo will give topo sort for DAG , If its not possible that means the graph is CYCLIC, USING this reverse method
 if the no. of node == count of nodes traverse in Kahn's algo , then its a DAG
 Otherwise --->cyclic graph

T.C -O(N+E)
S.C -O(N)

JAVA CODE-
class solution {
 public static boolean cyclic(int N, ArrayList<ArrayList<Integer>> adj)
   {
 
      //indegree array
      int [] indegree= new int[n];
      
      //STEP 1- COUNT INDEGREE
       for(int i=0;i<n;i++)
         {
            for(Integer it: adj.get(i))
                indegree[it]++;
          }
       //queue for BFS
       Queue<Integer> q= new LinkedList<>();
      
      //STEP 2 - add 0 indegree nodes to queue
      for(int i=0;i<n;i++){
         if(indegree[i]==0)
           q.add(i);
       
   ******    int count=0;    ********
       //STEP 3 - BFS CALL
       while(!q.isEmpty())
          {
             Integer node=q.poll();
 *******    count++;  ****************
             //adj nodes
             for(Integer it: adj.get(node))
                {
                   //decrease indegree
                   indegree[it]--;
                   //add if 0
                   if(indegree[it]==0)
                     q.add(it);
                 }
            }
     if(count==N)
          return false;
       else 
          return true;  //cylic graph
       }
   }
