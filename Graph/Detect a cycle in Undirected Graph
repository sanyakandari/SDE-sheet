DETECT A CYCLE IN AN UNDIRECTED GRAPH that may have components
Given :-  adjacency list , no. of nodes i.e v

#USING BFS TRAVERSAL 

algo-
1. maintain a  record of curr node and its prev in queue
2. if node  is visited but not equals to prev. then cycle exsist

T.C -O(N)
S.C- O(N)


JAVA CODE-

//class for node
class Node{
  
  int first;
  int second;
  public Node(int first ,int second)
     {
       this.first=first;
       this.second =second;
      }
   }
   
  class solution{
    static boolean checkcyclicgraph(int v, ArrayList<ArrayList<Integer>> adj)
    {
      //visited array
      boolean vis[]= new boolean [v+1];
      Arrays.fill(vis,false);
      
      //for component
      for(int i=1;i<=v;i++)
      {
        if(vis[i]==false)
          {
            if(iscyclic(i,adj,vis))
              return true;
           }
        }
     return false;
     }
    static boolean iscyclic(int node,ArrayList<ArrayList<Integer>> adj,boolean vis[])
      {
         //queue to store both curr and prev nodes
         Queue<Node> q= new LinkedList<>();
          //first element will not have a prev node
          q.add(new Node(node,-1));
          viss[node]=true; //marked visited
          
          while(!q.isEmpty())
           {
              int curr= q.peek().first;  //store curr node
              int par= q.peek().second;  //store parent node
              q.poll(); //remove top
              
              //check for adjacent nodes
              for(Integer it:adj.get(node))
                {
                   if(vis[it]==false)
                     {
                        vis[it]=true;
                        q.add(new Node(it,curr);
                       }
                     //else if the element is visited and not equal to prev 
                     else if(par!=it)
                       return true; //cycle found
                 }
              }
             
             return false;
          }
      }
      
    
