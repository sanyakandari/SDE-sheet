ALGO-
 1. just us another parameter in the dfs call ,ie. parent 
 2. parent node is the previous node to the current node
 3. if the node is visited and not equal to parent -->cycle exist
 
 T.C -O(N)
 S.C-O(N)
 
 JAVA CODE:-
 class solution{
 
 public boolean iscycle(int v , ArrayList<ArrayList<Integer>> adj)
 {
    //visited array
    boolean vis[]= new boolean [v+1];
    Arrays.fill(vis,false);
    
    //for components
    for(int i=1;i<=v;i++)
    {
       if(vis[i]==false)
         { 
            if(checkcycle(i,-1,vis,adj)) //initially there will be no parent i.e -1
               return true;
           }
     }
    return false;
  }
 public boolean checkcycle(int node, int parent, boolean [] vis, ArrayList<ArrayList<Integer>> adj)
   {
      //mark visited
      vis[node]=true;
      for(Integer it: adj.get(node))
       {
           //if node not visited call dfs
           if(vis[it]==false)
             {
                if(checkcycle(it,node,vis,adj)==true)
                   return true;
              }
           else if(it!=parent)
              return true;
        }
     return false;
    }
  }
          
