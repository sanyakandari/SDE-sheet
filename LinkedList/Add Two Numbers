You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order,
and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.
Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.

#ONLY OPTIMAL FORCE
1. Creating new LL
2.dummy node --> null
3.temp node --> dummy
4. iterate until c==1
5. sum=l1+l2+carry
6. node val to add in new LL , sum%10
7.carry =sum/10;
8. add connect point temp.next = node
9. move forward
10. return dummy.next;

T.C-O(MAX(N1,N2))
S.C-O(N)

JAVA CODE-
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode dummy = new ListNode();
        ListNode temp= dummy;
        int carry=0;
        int sum=0;
        while(l1!=null || l2!=null ||carry==1)
        {
            sum=0;
            if(l1!=null)
            {
                sum +=l1.val;
                l1=l1.next;
                
            }
             if(l2!=null)
            {
                sum +=l2.val;
                l2=l2.next;
                
            }
            sum +=carry;
            carry =sum/10;
            
            //new node to create LL
            ListNode node = new ListNode(sum%10);
            //add connect betw temp and new node
            temp.next=node;
            temp=temp.next;
        }
        return dummy.next;
    }
}
