Given the head of a singly linked list, group all the nodes with odd indices together followed by the nodes with even indices, and return the reordered list.

The first node is considered odd, and the second node is even, and so on.

Note that the relative order inside both the even and odd groups should remain as it was in the input.
Input: head = [1,2,3,4,5]
Output: [1,3,5,2,4]

#using two dummy nodes odd and even 
T.C-O(N)
S.C-O(1)

JAVA CODE-
public class Solution {
    public ListNode oddEvenList(ListNode head) {
         if (head == null) return null;
        ListNode odd = head;
        ListNode even = head.next;
        ListNode evenHead = head.next;
        // `even != null` rules out the list of only 1 node
        // `even.next != null` rules out the list of only 2 nodes
        while (even != null && even.next != null) {
            // Put odd to the odd list
            odd.next = odd.next.next;
            
            // Put even to the even list
            even.next = even.next.next;
            
            // Move the pointer to the next odd/even
            odd = odd.next;
            even =even.next;
        }
        odd.next=evenHead;
        return head;
    }
}
    
