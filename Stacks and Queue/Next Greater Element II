Given a circular integer array nums (i.e., the next element of nums[nums.length - 1] is nums[0]), return the next greater number for every element in nums.

The next greater number of a number x is the first greater number to its traversing-order next in the array,
which means you could search circularly to find its next greater number. If it doesn't exist, return -1 for this number.


#CIRCULAR ARRAY 
VARIANT NO.2
USING STACKS

T.C- O(2N +2N)=O(N)
S.C-O(N)

JAVA CODE-
class Solution {
    public int[] nextGreaterElements(int[] nums) {
        int n= nums.length;
        int nge[]= new int[n];
        //stack 
        Stack<Integer> st= new Stack<>();
        //start iterating from the back
        for(int i=(2*n-1);i>=0;i--)
        {
            //removing all the smaller elements from stack
            while(st.isEmpty()== false && st.peek()<=nums[i%n])
                st.pop();
         
            if(i<n)
            {
                if(st.isEmpty()==false)
                     nge[i]=st.peek(); //add the nge into res i.e the top of stack
                else
                    nge[i]=-1;  //is stack is empty then no nge available
                
                
            }
            //push the element into stack
            st.push(nums[i%n]);
            
            
            
        }
        return nge;
    }
}
