Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.

 Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.

#Brute force
T.C -O(N^2)
S.C- O(1)

1.find water stored at individual index
2. calculate water stored --> min(left(i),right(i)) -a[i]

#BETTER FORCE
T.C-O(N)
S.C- O(N)

1. create two array one for prefix max, other for suffix max
2. iterate for each element and then cal water stored for same formula

#OPTIMAL FORCE
USING 2 POINTERS APPROACH
T.C -O(N)
S.C-O(1)

ALGO:
1. use two pointer l =0,r=n-1
2. res for result and two variable to store the curr leftmax and rightmax for index i
3. case 1: check if the a[l]<=a[r] //there is someone greter than left onthe right side so water can be stored
4. then , check if leftmax is greater than a[l] if not update
5. calculate res += leftmax-a[l], left++;
6. do the same for right pointer if a[l]>a[r]

JAVA CODE-
class Solution {
    public int trap(int[] height) {
        int n= height.length;
        //TWO POINTERS
        int left=0,right=n-1;
        int res=0,leftmax=0,rightmax=0;
        
        //condition 1
        while(left<=right)
    {
        if(height[left]<=height[right])
        {
            //check for leftmax
            if(height[left]>=leftmax)
                leftmax= height[left];
            else 
                res += leftmax-height[left]; //calculate res
            
           left++;
            
        }
        else
        {
            if(height[right]>=rightmax)
                rightmax= height[right];
            else 
                res +=rightmax-height[right]; //calculate res
            
           right--;
    
        }
    }
        return res;
    }
}

