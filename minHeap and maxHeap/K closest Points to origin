Given an array of points where points[i] = [xi, yi] represents a point on the X-Y plane and an integer k, return the k closest points to the origin (0, 0).
The distance between two points on the X-Y plane is the Euclidean distance (i.e., âˆš(x1 - x2)2 + (y1 - y2)2).
You may return the answer in any order. The answer is guaranteed to be unique (except for the order that it is in).

Input: points = [[1,3],[-2,2]], k = 1
Output: [[-2,2]]

USING MAX HEAP
JAVA CODE:=

class point{

int x;
int y;
int distance;
public point(int x,int y ,int distance)
{
   this.x=x;
   this.y=y;
   this.distance=distance;
 }
 
 class solution{
 public int[][] kclosest(int [][]points,int k)
 {  //maxheap on the basis of distance of points
    PriorityQueue<point> maxheap=new PriorityQueue<>(p1,p2)->p2.distance-p1.distance);
    for(int i=0;i<k;i++){
     int x= points[i][0]; //x
     int y= points[i][1];  //y 
     int distance= x*x+y*y;  //distance from origin
     point p =new point(x,y,distance);
     maxheap.add(p);  //adding to heap
     }
     
     //checking for other points
     for(int i=k;i<points.length;i++)
     {  
     int x=points[i][0];
     int y= points[i][1];
     int distance =x*x+y*y;
     if(distance<maxheap.peek().distance)
       {
          maxheap.poll();
          maxheap.add(new point(x,y,distance));
     
       }
      }
      //2d array to return 
      int[][] res= new int[k][2];
      int i=0;
      while(!maxheap.isEmpty())
      {  point p= maxheap.poll();
         res[i][0]= p.x;
         res[i][1]= p.y;
         i++;
       }
       return res;
       }
    }
 
 
 
