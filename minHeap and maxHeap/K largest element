Given an integer array nums and an integer k, return the kth largest element in the array.
Note that it is the kth largest element in the sorted order, not the kth distinct element.

Input: nums = [3,2,1,5,6,4], k = 2
Output: 5

             MIN HEAP
             T.C = O(nlogk)
 Java code=
 class Solution {
    public int findKthLargest(int[] nums, int k) {
        //min heap 
        PriorityQueue<Integer> minHeap =new  PriorityQueue<Integer>((n1,n2)->n1-n2);
        for(int i=0;i<k;i++)
           minHeap.add(nums[i]);
        
        //comparing the minheap with the next element
        for(int i=k;i<nums.length;i++)
        {
           if(nums[i]>minHeap.peek())
           {
             minHeap.poll();
             minHeap.add(nums[i]);
             }
        }
        
        return minHeap.poll();
        }
     }
     
     
     //smallest kth element -> Maxheap
     class Solution {
    public int findKthLargest(int[] nums, int k) {
        //min heap 
        PriorityQueue<Integer> maxHeap =new  PriorityQueue<Integer>((n1,n2)->n2-n1);
        for(int i=0;i<k;i++)
           maxHeap.add(nums[i]);
        
        //comparing the maxheap with the next element
        for(int i=k;i<nums.length;i++)
        {
           if(nums[i]<maxHeap.peek())
           {
             maxHeap.poll();
             maxHeap.add(nums[i]);
             }
        }
        
        return maxHeap.poll();
        }
     }
     
