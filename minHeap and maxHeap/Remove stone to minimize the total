You are given a 0-indexed integer array piles, where piles[i] represents the number of stones in the ith pile, and an integer k. You should apply the following operation exactly k times:

Choose any piles[i] and remove floor(piles[i] / 2) stones from it.
Notice that you can apply the operation on the same pile more than once.

Return the minimum possible total number of stones remaining after applying the k operations.

Input: piles = [5,4,9], k = 2
Output: 12
Explanation: Steps of a possible scenario are:
- Apply the operation on pile 2. The resulting piles are [5,4,5].
- Apply the operation on pile 0. The resulting piles are [3,4,5].
The total number of stones in [3,4,5] is 12.

#USING MAXHEAP
T.C-O(NLOGN)

JAVA CODE-
class Solution {
    public int minStoneSum(int[] piles, int k) {
        int sum=0,num=0;
        PriorityQueue<Integer> maxheap= new PriorityQueue<>((a,b)->b-a);
        for(int n:piles)
            maxheap.add(n);
        
        for(int i=1;i<=k;i++)
        {
            num=(maxheap.poll()+1)/2;
            maxheap.add(num);
        }
        while(!maxheap.isEmpty())
            sum=sum+maxheap.poll();
        
        return sum;
    }
}

